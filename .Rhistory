source('~/.active-rstudio-document', echo=TRUE)
install.packages(c("backports", "BH", "callr", "cli", "curl", "digest", "dplyr", "ellipsis", "fansi", "farver", "fs", "haven", "htmltools", "httpuv", "later", "markdown", "mime", "nycflights13", "openssl", "pillar", "plyr", "prettyunits", "processx", "promises", "purrr", "Rcpp", "rlang", "scales", "stringi", "sys", "tibble", "tidyr", "tinytex", "vctrs", "xfun", "xml2"))
library(tidyverse)
devtools::install_github("r-lib/rlang")
remotes::install_github("r-lib/rlang")
library("rlang", lib.loc="~/R/win-library/3.4")
install.packages("usethis")
library("rlang", lib.loc="~/R/win-library/3.4")
install.packages("rlang")
library(tidyverse)
library(tidyverse)
library("rlang", lib.loc="~/R/win-library/3.4")
install.packages("usethis", dependencies = FALSE)
install.packages("rlang", dependencies = FALSE)
library("rlang", lib.loc="~/R/win-library/3.4")
install.packages("rlang", dependencies = FALSE)
install.packages("tidyverse")
install.packages("rlang")
remotes::install_github("r-lib/rlang")
View(hh)
View(hh)
View(hh)
#import household questionnaire dataset
hh <- read_excel("./raw/UrbanMalaria_DataFallbackServer.xlsx")
source('~/Urban.R', echo=TRUE)
install.packages("tidyverse")
View(hh)
#import household questionnaire dataset
urbanHH <- read_excel("./raw/UrbanMalaria_DataFallbackServer.xlsx")
install.packages("readxl")
#verify the working directory
#getwd()
#---------------------------------------------- ------------------------------------------------------------#
#import household questionnaire dataset
urbanHH <- read_excel("./raw/UrbanMalaria_DataFallbackServer.xlsx")
install.packages("RCurl")
install.packages("shinyWidgets")
shiny::runApp('D:/medicare-map')
runApp('D:/medicare-map')
runApp('D:/medicare-map')
runApp('D:/medicare-map')
shiny::runApp('D:/medicare-map')
install.packages("highcharter")
runApp('D:/medicare-map')
install.packages("highcharter")
source("D:/medicare-map/data-prep.R", echo=TRUE)
shiny::runApp('D:/medicare-map')
install.packages("highcharter")
install.packages("highcharter", dependencies = FALSE)
runApp('D:/medicare-map')
install.packages("shiny", dependencies = FALSE)
shiny::runApp('D:/medicare-map')
install.packages("dplyr")
shiny::runApp('D:/medicare-map')
install.packages("tychobratools")
runApp('D:/medicare-map')
install.packages("tychobratools")
shiny::runApp('D:/mss_r/shiny')
runApp('D:/mss_r/shiny')
install.packages("shidashi")
install.packages(c("ggExtra", "rmarkdown"))
library(shidashi)
project <- file.path(tools::R_user_dir('shidashi', which = "data"), "AdminLTE3")
source("~/.active-rstudio-document", echo=TRUE)
shiny::runApp('D:/demo')
deployApp()
library(rsconnect)
deployApp()
load("D:/mss_r/.RData")
runApp('D:/mss_r/shiny')
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
shiny::runApp('D:/mss_r/mss')
deployApp()
library(rsconnect)
deployApp()
p
View(p)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("geojsonio")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("maptools")
source("~/.active-rstudio-document", echo=TRUE)
install.packages("viridis")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(p)
source("~/.active-rstudio-document", echo=TRUE)
p
source("~/.active-rstudio-document", echo=TRUE)
plot2 <- plot(mydata2[,3], xlab = "year", ylab = "Daily Totals (Gwh", type="l", main="Wind", col="red",ylim = c(0,900))
plot2 <- plot(mydata2[,3], xlab = "year", ylab = "Daily Totals (Gwh", type="l", main="Wind", col="red",ylim = c(0,900))
source("D:/r_cert/Time Series Analysis.R", echo=TRUE)
#1 plot/window
par(mfrow=c(1,1))
#lets plot time series in a single year to investigate further
str(mydata2)
x <- as.Date(mydata2$Date)
head(x)
class(x)
str(moddate)
#convert data column into date format
moddate <- as.Date(x, format = "%m/%d/%Y")
str(moddate)
str(moddate)
mydata3 <- cbind(moddate, mydata2)
str(mydata3)
#select data for particular date range
mydata4 <- subset(mydata3,subset = mydata3$moddate >= "2017-01-01" & mydata3$moddate <="2017-12-31")
head(mydata4)
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
plot4 <- plot(as.factor(mydata4[.1]),mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
plot4 <- plot(as.factor(mydata4[.1]),mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
View(mydata4)
plot4 <- plot(as.factor(mydata4[.2]),mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
plot4 <- plot(as.factor(mydata4[.1]),mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
plot4 <- plot(as.factor(mydata4[.1]),mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
plot4 <- plot(as.factor(mydata4[.1]),mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
str(mydata4)
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge")
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge",)
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge",)
View(mydata4)
plot4 <- plot(mydata4[.8],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge",)
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge",)
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge",)
min(mydata4,1)
min(mydata4[,1])
max(mydata4[,1])
max(mydata4[,3])
min(mydata4[,3])
#select data for particular date range
mydata4 <- subset(mydata3,subset = mydata3$moddate >= "2017-01-01" & mydata3$moddate <="2017-12-31")
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge",)
plot4 <- plot(mydata4,xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge",)
plot4 <- plot(mydata4[.1],mydata4[.3],xlab="year", ylab="Daily Totals (Gwh", type="l", lwd=2, main="Consumption", col="organge",)
#### Districts with adequate ACT stock
```{r, message = F, warning = F, echo = F,fig.height = 6, fig.width = 10, fig.align = "center"}
unlink("D:/ramp_r/Malaria report_cache", recursive = TRUE)
knit_with_parameters("D:/ramp_r/Malaria report.Rmd", encoding = "UTF-8")
rmarkdown::run(
file = "inst/adaptive_dynamics_pip/Adaptive Dynamics.Rmd",
default_file = NULL,
auto_reload = TRUE,
shiny_args = NULL,
render_args = NULL)
rmarkdown::run(
file = "D://ramp_r/Malaria report.Rmd",
default_file = NULL,
auto_reload = TRUE,
shiny_args = NULL,
render_args = NULL)
#install and import libraries
#install.packages("streamgraph","viridis","plotly","DT")
#install.packages("sp","classInt","RColorbrewer")
require(rgdal)
library(viridis)
library(dplyr)
library(knitr)
library(ggplot2)
library(haven)
library(sp)
library(rmarkdown)
library(sf)
library(classInt)
library(RColorBrewer)
library(leaflet)
library(broom)
library(tmap)
theme_ramp <- function(base_size = 14) {
theme_bw(base_size = base_size) %+replace%
theme(
# L'ensemble de la figure
plot.title = element_text(size = rel(1), face = "bold", margin = margin(0,0,5,0), hjust = 0),
# Zone où se situe le graphique
panel.grid.minor = element_blank(),
panel.border = element_blank(),
# Les axes
axis.title = element_text(size = rel(0.85), face = "bold"),
axis.text = element_text(size = rel(0.70), face = "bold"),
axis.line = element_line(color = "black", arrow = arrow(length = unit(0.3, "lines"), type = "closed")),
# La légende
legend.title = element_text(size = rel(0.85), face = "bold"),
legend.text = element_text(size = rel(0.70), face = "bold"),
legend.key = element_rect(fill = "transparent", colour = NA),
legend.key.size = unit(1.5, "lines"),
legend.background = element_rect(fill = "transparent", colour = NA),
# Les étiquettes dans le cas d'un facetting
strip.background = element_rect(fill = "#17252D", color = "#17252D"),
strip.text = element_text(size = rel(0.85), face = "bold", color = "white", margin = margin(5,0,5,0))
)
}
#set working directory
knitr::opts_knit$set(root.dir = 'D:/ramp_r/')
#install and import libraries
#install.packages("streamgraph","viridis","plotly","DT")
#install.packages("sp","classInt","RColorbrewer")
require(rgdal)
library(viridis)
library(dplyr)
library(knitr)
library(ggplot2)
library(haven)
library(sp)
library(rmarkdown)
library(sf)
library(classInt)
library(RColorBrewer)
library(leaflet)
library(broom)
library(tmap)
theme_ramp <- function(base_size = 14) {
theme_bw(base_size = base_size) %+replace%
theme(
# L'ensemble de la figure
plot.title = element_text(size = rel(1), face = "bold", margin = margin(0,0,5,0), hjust = 0),
# Zone où se situe le graphique
panel.grid.minor = element_blank(),
panel.border = element_blank(),
# Les axes
axis.title = element_text(size = rel(0.85), face = "bold"),
axis.text = element_text(size = rel(0.70), face = "bold"),
axis.line = element_line(color = "black", arrow = arrow(length = unit(0.3, "lines"), type = "closed")),
# La légende
legend.title = element_text(size = rel(0.85), face = "bold"),
legend.text = element_text(size = rel(0.70), face = "bold"),
legend.key = element_rect(fill = "transparent", colour = NA),
legend.key.size = unit(1.5, "lines"),
legend.background = element_rect(fill = "transparent", colour = NA),
# Les étiquettes dans le cas d'un facetting
strip.background = element_rect(fill = "#17252D", color = "#17252D"),
strip.text = element_text(size = rel(0.85), face = "bold", color = "white", margin = margin(5,0,5,0))
)
}
#set working directory
knitr::opts_knit$set(root.dir = 'D:/ramp_r/')
#group dataset by orgunitlevel3,periodid and arrangeorgunitlevel3
upsurges <- wkly[which(!wkly$periodid == "2022W38"),]
install.packages("xfun")
install.packages("rmarkdown")
install.packages(".knit")
install.packages("knitr")
install.packages("Rtools")
install.packages("Rtools")
#install and import libraries
#install.packages("streamgraph","viridis","plotly","DT")
#install.packages("sp","classInt","RColorbrewer")
require(rgdal)
library(viridis)
library(dplyr)
library(knitr)
library(ggplot2)
library(haven)
library(sp)
library(rmarkdown)
library(sf)
library(classInt)
library(RColorBrewer)
library(leaflet)
library(broom)
library(tmap)
theme_ramp <- function(base_size = 14) {
theme_bw(base_size = base_size) %+replace%
theme(
# L'ensemble de la figure
plot.title = element_text(size = rel(1), face = "bold", margin = margin(0,0,5,0), hjust = 0),
# Zone où se situe le graphique
panel.grid.minor = element_blank(),
panel.border = element_blank(),
# Les axes
axis.title = element_text(size = rel(0.85), face = "bold"),
axis.text = element_text(size = rel(0.70), face = "bold"),
axis.line = element_line(color = "black", arrow = arrow(length = unit(0.3, "lines"), type = "closed")),
# La légende
legend.title = element_text(size = rel(0.85), face = "bold"),
legend.text = element_text(size = rel(0.70), face = "bold"),
legend.key = element_rect(fill = "transparent", colour = NA),
legend.key.size = unit(1.5, "lines"),
legend.background = element_rect(fill = "transparent", colour = NA),
# Les étiquettes dans le cas d'un facetting
strip.background = element_rect(fill = "#17252D", color = "#17252D"),
strip.text = element_text(size = rel(0.85), face = "bold", color = "white", margin = margin(5,0,5,0))
)
}
#set working directory
knitr::opts_knit$set(root.dir = 'D:/ramp_r/')
View(wkly)
install.packages("pandoc")
remove.packages('rmarkdown')
remove.packages('knitr')
remove.packages('knit')
remove.packages('knitr')
remove.packages('rmarkdown')
system2("java", "-version", stderr = TRUE)
system2("java", c("Echo", "Drink Hot Java"))
install.packages("rmarkdown")
install.packages("rgdal")
install.packages("viridis")
install.packages("RColorBrewer")
install.packages("sf")
install.packages("tmap")
install.packages("tmap")
install.packages("broom")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("tmap")
install.packages("rgdal")
install.packages("rgdal", dependencies = TRUE)
View(rs)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
traceback()
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
data1<-data.table(Couple=c("a","a","b","b"),Ratio=1:4)
data1
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(data.table)
data1<-data.table(Couple=c("a","a","b","b"),Ratio=1:4)
data1[Couple,Ratio:=c(0L,Ratio[-1])]
source("~/.active-rstudio-document", echo=TRUE)
data1<-data.table(Couple=c("a","a","b","b"),Ratio=1:4)
data1[cple,Ratio:=c(0L,Ratio[-1])]
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
data1
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
traceback()
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/pull_dhis2_data.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/pull_dhis2_data.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/prep_loc_table.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/prep_loc_table.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/prep_loc_table.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/prep_loc_table.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
traceback()
traceback()
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
traceback()
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
write.csv(hf_tpr, file.path(out_dir, "hf_tpr.csv"), row.names = F)
# TPR
hf_tpr <- dt[level == 5, .(total_tests = sum(rdt_tested, na.rm = T) + sum(micro_tested, na.rm = T),
total_positives = sum(rdt_pos, na.rm = T) + sum(micro_pos, na.rm = T),location_name, year, week)]
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/pull_data.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
#import location_details
location_detail <- file.path("D:/DHIS2_Data/location_details.csv")
View(location_detail)
#import location_details
location_detail <- file.path("D:/DHIS2_Data/location_details.csv")
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
location_detail
#import location_details
location_detail <- file.path("D:/DHIS2_Data/location_details.csv", header = TRUE)
location_detail
#import location_details
location_detail <- file.path("D:/DHIS2_Data/location_details.csv", header = TRUE)
print(location_detail)
#import location_details
location_detail <- file.path("D:/DHIS2_Data/location_detail.csv", header = TRUE)
print(location_detail)
#import location_details
location_detail <- fread("D:/DHIS2_Data/location_detail.csv", header = TRUE)
#import location_details
location_detail <- fread("D:/DHIS2_Data/location_details.csv", header = TRUE)
location_detail
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
traceback()
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
traceback()
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
traceback()
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
traceback()
source("D:/Ramp/DHIS2 Reports/R/weekly_report.R", echo=TRUE)
